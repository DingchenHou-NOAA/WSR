# @ job_name = jwsr_main_00
#BSUB -J wsr_main_00
##@ output = /com/output/prod/today/wsr_main_00.o$(jobid)
# @ output = LOCALPREFIXPTMP/com/output/dev/today/wsr_main_00.o$(jobid)
#BSUB -o LOCALPREFIXPTMP/com/output/dev/today/wsr_main_00.o.%J
##@ error = /com/output/prod/today/wsr_main_00.o$(jobid)
# @ error = LOCALPREFIXPTMP/com/output/dev/today/wsr_main_00.o$(jobid)
#BSUB -e LOCALPREFIXPTMP/com/output/dev/today/wsr_main_00.o.%J
# @ shell = /bin/sh
#BSUB -L /bin/ksh
# @ job_type = parallel
#BSUB -a poe
# @ node = 2
# @ total_tasks = 48
#BSUB -n 48
#BSUB -R span[ptile=16]
##@ class = prod
# @ class = dev
#BSUB -q "dev_high"
# @ node_usage = not_shared
#BSUB -x
# @ wall_clock_limit = 00:45:00
#BSUB -W "01:00"
##@ initialdir = /tmpnwprd
# @ initialdir = LOCALPREFIXPTMP/tmpnwprd
#BSUB -cwd LOCALPREFIXPTMP/tmpnwprd
# @ notification = never
### @ resources = ConsumableCpus(1) ConsumableMemory(500 MB)
# @ resources = ConsumableMemory(500 MB)
#BSUB -R "rusage[mem=500]"
# @ task_affinity = core(1)
##@ account_no = GEN-OPS
# @ account_no = GEN-T2O
##@ group = nwprod
# @ group = devonprod
# @ queue


mach=`uname -n`
machl=`echo $mach|cut -c1`
case $machl in
  (c)
    echo `date` job starting on cirrus
    export wsrmachine=ccs
  ;;
  (s)
    echo `date` job starting on stratus
    export wsrmachine=ccs
  ;;
  (t)
    echo `date` job starting on tide
    export wsrmachine=wcoss
  ;;
  (g)
    echo `date` job starting on gyre
    export wsrmachine=wcoss
  ;;
  (*)
    echo UNKNOWN MACHINE $mach
    export wsrmachine=unknown
  ;;
esac
pwd
if [[ $wsrmachine = ccs ]]; then
  export wsrmpexec=poe
  export MP_SHARED_MEMORY=yes
  export MEMORY_AFFINITY=MCM
elif [[ $wsrmachine = wcoss ]]; then
  echo find module before
  env | grep -i module
  echo find module
  export MODULE_VERSION=3.2.9
  module() { 
    eval `/usrx/local/Modules/$MODULE_VERSION/bin/modulecmd bash $* ` 
  }
  export -f module
  module list
  echo after list modules

  export wsrmpexec=mpirun.lsf
  export MP_SHARED_MEMORY=yes
  export MP_TASK_AFFINITY=core
  export MP_EUIDEVICE=sn_all
  export MP_EUILIB=us
#  export MP_INSTANCES=48
#  export MP_INSTANCES=32
  export PATH="$PATH:."
fi
echo wsrmpexec=$wsrmpexec

set -x
export envir=prod
export envir=dev
export cyc=00
export job=wsr_main_00

  if [[ $envir != dev ]]; then

SMSNAME=%SMSNAME% export SMSNAME
SMSNODE=%SMSNODE% export SMSNODE
SMSPASS=%SMSPASS% export SMSPASS
SMS_PROG=%SMS_PROG% export SMS_PROG

SMSBIN=/nwprod/sms/bin export SMSBIN

. /nwprod/versions/wsr.ver

  else

echo `date` $job job begin

echo veriables needed for dev runs begin
export DCOMROOT=/dcom
export expid=EXPID
export localprefixptmp=LOCALPREFIXPTMP
export localprefixsave=LOCALPREFIXSAVE
export SMSBIN=$localprefixsave/nwdev/control

. $localprefixsave/nw$envir/*/versions/wsr.ver
echo variables needed for dev runs end

  fi

  if [[ $envir != dev ]]; then

/nw$envir/wsr.${model_ver}/jobs/JWSR_MAIN.sms.$envir

  else

echo `date` $job environment before
env|sort

echo `date` $job j-job before
$localprefixsave/nw$envir/wsr.${model_ver}/jobs/JWSR_MAIN.sms.$envir
echo `date` $job j-job after

chainsubmit=LOCALCHAINOPTION
echo chainsubmit=$chainsubmit

echo `date` $job job end

  fi


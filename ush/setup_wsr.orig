#!/bin/sh

# right now outputs three files, targdata.d is created in GESdir to be read by 
# main targeting script.   (current date)targdata.d is a copy of targdata.d, but
# is stored in a different permanent directory, COMOUT.  Finally, another file 
# called (current date)targdata.txt is saved in COMOUT as a human-readable 
# version of targdata.d  As of 6/5/00 these two saved files will be overwritten by
# files created by a second run of this script on the same day

## UPDATED FOR WSR02 BY J.R.MOSKAITIS 11/14/01 ##

## UPDATED 2/13/02 TO FIX INSTRUCTIONS REGARDING VERIFICATION LONGITUDE ##

curyy=`date -u +%Y`
curmm=`date -u +%m`
curdd=`date -u +%d`
curhh=`date -u +%H`
PDY=${curyy}${curmm}${curdd}

####################################
# Set Working Directories
####################################

GESdir=/nwges/wsr

text=${GESdir}/targdata.txt.$curhh
rm -rf $text 2> /dev/null

cd $GESdir
rm targdata.d
rm -rf targdata.d 2> /dev/null

clear

echo $PDY >> $GESdir/targdata.d

echo "----------------------------------------------------------------"
echo "|       WINTER STORM RECONNAISSANCE PROGRAM INPUT SCRIPT       |"
echo "----------------------------------------------------------------"
echo
echo "Please enter one case for each verification date and region."
echo "Additional cases between the observation date entered and the" 
echo "verification date will be added for the computations."
echo 
echo "HOW MANY TARGETING CASES DO YOU WANT TO RUN?"
read cases
echo
echo

echo $cases >> $GESdir/targdata.d
if [ ${cases} -ne 1 ]; then
    echo "On ${curmm}/${curdd}/${curyy}, ${cases} cases were run" >> $text
else
    echo "On ${curmm}/${curdd}/${curyy}, 1 case was run" >> $text
fi

resolution=1
echo $resolution >> $GESdir/targdata.d

if [ ${resolution} -eq 1 ]; then
    echo "The targeting program was run in synoptic mode" >> $text
else
    echo "The targeting program was run in mesoscale mode" >> $text 
fi 

mk50=0
while test ${mk50} -eq 0
do
    mk50=1
    echo "                                    SEARCH           VERIFICATION       VERIFICATION"
    echo "                                     AREA                NORM              RADIUS"
    echo "<ENTER> OR 1) FOR WSR DEFAULT: 160E,260E;15N,65N     3-level u,v,T        1000 km"
    echo "           2) PACJET DEFAULT : 200E,240E;30N,55N     3-level u,v,T         500 km"
    echo "           3) EAST COAST     : 260E,300E;20N,50N     3-level u,v,T         500 km"
    echo "           4) MANUALLY ENTER"
    echo "              NEW PARAMETERS"
    read defchoice
    echo

    case $defchoice in
       "") vnorm=2
           radvr=1000
           lon1=160
           lon2=260
           lat1=15
           lat2=65;;
        1) vnorm=2
           radvr=1000
           lon1=160
           lon2=260
           lat1=15
           lat2=65;;
        2) vnorm=2
           radvr=500
           lon1=200
           lon2=240
           lat1=30
           lat2=55;;
        3) vnorm=2
           radvr=500
           lon1=260
           lon2=300
           lat1=20
           lat2=50;;
        4) mk51=0
           while test ${mk51} -eq 0
           do
               mk51=1
               echo "CHOOSE ONE OF THE FOLLOWING VERIFICATION NORMS"
               echo "1) 200mb, 500mb, AND 850mb WINDS"
               echo "2) 200mb, 500mb, AND 850mb WINDS AND TEMPERATURE"
               echo "3) 850mb WINDS, PRECIPITATION, AND MSLP"
               read vnorm
               if [[ ${vnorm} -ne 1 && ${vnorm} -ne 2 ]]; then
                   if [ ${vnorm} -ne 3 ]; then
                      mk51=0
                      echo
                      echo "Invalid entry, please try again"
                   fi
               fi
               echo
           done

           mk52=1
           echo "ENTER THE RADIUS OF THE VERIFICATION REGION (km)"
           read radvr
           echo

           echo "** for longitudes in the western hemisphere, degrees east = 360 - degrees west **"
           echo "** please enter integer values **"
           echo
           echo "ENTER THE WESTERN BOUNDARY OF THE SEARCH AREA (degrees east of 0)"
           read lon1
           echo
           echo "ENTER THE EASTERN BOUNDARY OF THE SEARCH AREA (degrees east of 0)"
           read lon2
           echo
           echo "ENTER THE SOUTHERN BOUNDARY OF THE SEARCH AREA (degrees north)"
           read lat1
           echo
           echo "ENTER THE NORTHERN BOUNDARY OF THE SEARCH AREA (degrees north)"
           read lat2
           echo

           mk12=0
           while test ${mk12} -eq 0
           do
               echo "---------------------------------------------------------------"
               echo "PLEASE VERIFY THIS SEARCH AREA INFORMATION"
               echo "---------------------------------------------------------------"
               echo "1) WESTERN BOUNDARY: ${lon1}"
               echo "2) EASTERN BOUNDARY: ${lon2}"
               echo "3) SOUTHERN BOUNDARY: ${lat1}"
               echo "4) NORTHERN BOUNDARY: ${lat2}"
               echo "---------------------------------------------------------------"
               echo "<ENTER> IF THIS IS CORRECT OR PRESS c TO MAKE CHANGES"

               read response

               if test "$response" = ''
               then
                   mk12=1
               else
                   echo
                   echo "ENTER THE NUMBER OF THE ITEM YOU WISH TO CHANGE"
                   read changenum
                   echo
                   case $changenum in
                       1) echo "ENTER THE WESTERN BOUNDARY OF THE SEARCH AREA"
                          read lon1;;
                       2) echo "ENTER THE EASTERN BOUNDARY OF THE SEARCH AREA"
                          read lon2;;
                       3) echo "ENTER THE SOUTHERN BOUNDARY OF THE SEARCH AREA"
                          read lat1;;
                       4) echo "ENTER THE NORTHERN BOUNDARY OF THE SEARCH AREA"
                          read lat2;;
                       *) echo "please enter one of the numbers on the menu";;
                   esac
                   echo
               fi
           done;;

       *)echo "Invalid entry, please try again"
         mk50=0
         echo;;

    esac
done

echo ${vnorm} >> $GESdir/targdata.d
echo ${radvr} >> $GESdir/targdata.d
echo ${lon1} >> $GESdir/targdata.d
echo ${lon2} >> $GESdir/targdata.d
echo ${lat1} >> $GESdir/targdata.d
echo ${lat2} >> $GESdir/targdata.d

case $vnorm in
    1) echo "200mb, 500mb and 850mb winds were used as the verifying norm" >> $text;;
    2) echo "200mb, 500mb and 850mb winds and temperature were used as the verifying norm" >> $text;;
    3) echo "850mb winds, precipiation, and mslp were used as the verifying norm" >> $text;;
esac

echo "The radius of the verification region(s) is ${radvr}km" >> $text
echo
echo >> $text
echo "Search Area Boundaries" >> $text
echo "  Western: ${lon1}E" >> $text
echo "  Eastern: ${lon2}E" >> $text
echo "  Southern: ${lat1}N" >> $text
echo "  Northern: ${lat2}N" >> $text

ct1=0
while test ${ct1} -ne ${cases}
do
    ct1=`expr ${ct1} + 1`
    mk2=0
    while test ${mk2} -ne 1
    do 
	mk3=0
	while test ${mk3} -ne 1
	do 
            mk3=1
            verifsame='n'
	    if [ ${ct1} -ne 1 ]; then 
                echo "IS THE FLIGHT OBSERVATION TIME FOR CASE ${ct1} ALSO ${obsdate}? (y/n)"
		read choice
   		echo
		if test "$choice" = 'n' || test "$choice" =  'N'
                then     
		    echo "FLIGHT OBSERVATION TIME FOR CASE ${ct1} (yyyymmddhh)"
                    echo "Enter the earliest observation time."
		    read obsdate
		    echo
		    echo "IS THIS VERIFICATION CASE IDENTICAL TO THE PREVIOUS CASE? (y/n)"
		    read verifsame
		    echo
                fi
	    else
                echo "FLIGHT OBSERVATION TIME FOR CASE ${ct1} (yyyymmddhh)"
                echo "Enter the earliest observation time."
                read obsdate
            fi

            if [ ${#obsdate} -ne 10 ]; then
	    	echo "Invalid number of digits"
		echo "There must be ten digits"
		mk3=0
	    fi 

	    hh=`echo $obsdate|cut -c9-10`
	    if [[ ${hh} -ne 00 && ${hh} -ne 12 ]]; then 
		echo "Invalid time; valid times are 00 and 12"
		mk3=0
            fi

            latestobstime=`/nwprod/util/exec/ndate +120 ${PDY}00`
            if [ ${obsdate} -gt ${latestobstime} ]; then
                echo "Observation time must be within 120 hours of ${PDY}00"
                mk3=0
            fi


	    if [ ${mk3} -eq 0 ]; then
		echo "Please try again"
		echo 
            else
                echo
            fi

        done

	if test "$verifsame" = 'y' || test "$verifsame" = 'Y'
    	then
	    nothing=0
	else
        
            mk4=0
	    while test ${mk4} -ne 1
	    do
	        mk4=1
                echo "VERIFICATION TIME FOR CASE ${ct1} (yyyymmddhh)"
                read veridate
            
	        if [ ${#veridate} -ne 10 ]; then
                    echo "Invalid number of digits"
                    echo "There must be ten digits"
                    mk4=0
                fi

                hh=`echo $veridate|cut -c9-10`
                if [[ ${hh} -ne 00 && ${hh} -ne 12 ]]; then
                   echo "Invalid time; valid times are 00 and 12"
                   mk4=0
                fi
 
                if [ ${mk4} -eq 0 ]; then
		    echo "Please try again"
		    echo 
                else 
		    echo
	        fi
       
            done
	fi

        if [ ${obsdate} -ge ${veridate} ]; then
        	echo "The verification time must be larger than the observing time."
        	echo "The selected observation and verification times are:"
                echo "$obsdate and $veridate"
                echo "Please try again"
                echo
        else
		mk2=1
        fi
    done

    if test "$verifsame" = 'y' || test "$verifsame" = 'Y'
    then
	nothing=0
    else 

        echo "LATITUDE OF THE CENTER OF THE VERIFICATION REGION FOR CASE ${ct1}"
        echo "(integer or one decimal place)"
        read lat
	echo	

        echo "LONGITUDE OF THE CENTER OF THE VERIFICATION REGION FOR CASE ${ct1}"
        echo "(degrees west, integer)"
        read long
	echo

        mk7=0
        while test ${mk7} -ne 1
        do
	    echo "CHOOSE A PRIORITY FOR CASE ${ct1}"
	    echo "1) HIGH PRIORITY"
	    echo "2) MEDIUM PRIORITY"
	    echo "3) LOW PRIORITY"
	    read priority
            case $priority in
	        1) mk7=1
                   prioritytxt=HIGH;;
                2) mk7=1
                   prioritytxt=MEDIUM;;
                3) mk7=1
                   prioritytxt=LOW;;
                *) echo "Invalid entry, please try again";;
            esac
            echo
        done

        echo "ENTER COMMENTS ABOUT CASE ${ct1}, OR PRESS ENTER"
        read comments
        echo

    fi
 
    mk8=0
    while test ${mk8} -ne 1
    do

        echo "----------------------------------------------------------"
        echo "PLEASE VERIFY THIS INFORMATION YOU HAVE ENTERED FOR CASE ${ct1}"
        echo "----------------------------------------------------------"
        echo "1) OBSERVATION TIME:  $obsdate"
        echo "2) VERIFICATION TIME: $veridate"
        echo "3) LATITUDE: $lat"
        echo "4) LONGITUDE:  $long"
        echo "5) PRIORITY:  $prioritytxt"
        echo "6) COMMMENTS: $comments"
        echo "----------------------------------------------------------"
        echo "<ENTER> IF THIS IS CORRECT, OR PRESS c TO MAKE CHANGES"
        read response

        if test "$response" = ''
        then  
            echo $obsdate >> $GESdir/targdata.d 
            echo $veridate >> $GESdir/targdata.d
            echo $long >> $GESdir/targdata.d
            echo $lat >> $GESdir/targdata.d
            echo $priority >> $GESdir/targdata.d
            echo $comments >> $GESdir/targdata.d
            chmod u=rwx $GESdir/targdata.d
            mk8=1 
            
            echo >> $text
            echo "FOR CASE ${ct1}:" >> $text
            echo "Observation time:  ${obsdate}" >> $text
            echo "Verification time: ${veridate}" >> $text
            echo "Latitude:  ${lat}N" >> $text
            echo "Longitude: ${long}W" >> $text
            echo "Priority:  ${prioritytxt}" >> $text
            echo "Comments:  ${comments}" >> $text
        else
	    echo
	    echo "ENTER THE NUMBER OF THE ITEM YOU WISH TO CHANGE"
            read changenum
            echo 
	    case $changenum in
		1)mk3=0
                  while test ${mk3} -ne 1
                  do
                      mk3=1
                      echo "FLIGHT OBSERVATION TIME FOR CASE ${ct1} (yyyymmddhh)"
                      read obsdate
                      echo

                      if [ ${#obsdate} -ne 10 ]; then
                          echo "Invalid number of digits"
                          echo "There must be ten digits"
                          mk3=0
                      fi

                      hh=`echo $obsdate|cut -c9-10`
                      if [[ ${hh} -ne 00 && ${hh} -ne 12 ]]; then
                          echo "Invalid time; valid times are 00 and 12"
                          mk3=0
                      fi

                      latestobstime=`/nwprod/util/exec/ndate +120 ${PDY}00`
                      if [ ${obsdate} -gt ${latestobstime} ]; then
                          echo "Observation time must be within 120 hours of ${PDY}00"
                          mk3=0
                      fi

                      if [ ${mk3} -eq 0 ]; then
                          echo "Please try again"
                          echo 
                      else
                          echo
                      fi
                  done
                  if [ ${obsdate} -ge ${veridate} ]; then
                      echo "*******************************************"
                      echo "WARNING: THE OBSERVATION TIME IS CURRENTLY"
                      echo "         GREATER THAN THE VERIFICATION TIME"
                      echo "         PLEASE MAKE APPROPRIATE CHANGES"
                      echo "*******************************************"
                      echo
                  fi;;

		2)mk4=0
                  while test ${mk4} -ne 1
                  do
                      mk4=1
                      echo "VERIFICATION TIME FOR CASE ${ct1} (yyyymmddhh)"
                      read veridate
        
                      if [ ${#veridate} -ne 10 ]; then
                          echo "Invalid number of digits"
                          echo "There must be ten digits"
                          mk4=0
                      fi

                      hh=`echo $veridate|cut -c9-10`
                      if [[ ${hh} -ne 00 && ${hh} -ne 12 ]]; then
                          echo "Invalid time; valid times are 00 and 12"
                          mk4=0
                      fi
 
                      if [ ${mk4} -eq 0 ]; then
                          echo "Please try again"
                          echo
                      else
                          echo
                      fi
                  done
                  if [ ${obsdate} -ge ${veridate} ]; then
                      echo "*******************************************"
                      echo "WARNING: THE OBSERVATION TIME IS CURRENTLY"
                      echo "         GREATER THAN THE VERIFICATION TIME"
                      echo "         PLEASE MAKE APPROPRIATE CHANGES"
                      echo "*******************************************"
                      echo 
                  fi;;

		4)mk5=0
                      echo "LONGITUDE OF THE CENTER OF THE VERIFICATION REGION FOR CASE ${ct1}"
                      echo "(degrees west, integer)"
                      read long
                  echo;;

		3)mk6=0
                      echo "LATITUDE OF THE CENTER OF THE VERIFICATION REGION FOR CASE ${ct1}"
                      echo "(integer or one decimal place)"
                      read lat
                  echo;;

		5)mk7=0
                  while test ${mk7} -ne 1
                  do
                      echo "CHOOSE A PRIORITY FOR CASE ${ct1}"
                      echo "1) HIGH PRIORITY"
                      echo "2) MEDIUM PRIORITY"
                      echo "3) LOW PRIORITY"
                      read priority
                      case $priority in
                          1) mk7=1
                             prioritytxt=high;;
                          2) mk7=1
                             prioritytxt=medium;;
                          3) mk7=1
                             prioritytxt=low;;
                          *) echo "Invalid entry, please try again";;
                      esac
                      echo
                  done;;
                 
                6)echo "ENTER COMMENTS ABOUT CASE ${ct1}, OR PRESS ENTER"
                  read comments
                  echo;;

                *)echo "Invalid response";;
            esac
        fi
        echo
    done
    clear
done

echo "------------------------------------------------------------------"
echo "|  The Winter Storm Reconnaissance input file has been created.  |"
echo "|         Please ask the operator to run jwsr_main_xx            |"
echo "------------------------------------------------------------------"


#
#  Later edit - interpolate dates
#

TARGFILE=$GESdir/targdata.d

head -1 $TARGFILE | tail -1 > $GESdir/targdata_tmp.d
head -2 $TARGFILE | tail -1 | read CASES
head -3 $TARGFILE | tail -1 | read RESOLUTION 
head -4 $TARGFILE | tail -1 | read IVNORM
head -5 $TARGFILE | tail -1 | read RADVR
head -6 $TARGFILE | tail -1 | read LON1
head -7 $TARGFILE | tail -1 | read LON2
head -8 $TARGFILE | tail -1 | read LAT1
head -9 $TARGFILE | tail -1 | read LAT2

i=1
while [ $i -le $CASES ]
do
     LINE=`expr ${i} \* 6 + 4`
     head -n $LINE $TARGFILE | tail -1 | read OBSDATE[i]
     LINE=`expr $LINE + 1`
     head -n $LINE $TARGFILE | tail -1 | read VERIDATE[i]
     LINE=`expr $LINE + 1`
     head -n $LINE $TARGFILE | tail -1 | read VRLON[i]
     LINE=`expr $LINE + 1`
     head -n $LINE $TARGFILE | tail -1 | read VRLAT[i]
     LINE=`expr $LINE + 1`
     head -n $LINE $TARGFILE | tail -1 | read PRIORITY[i]
     LINE=`expr $LINE + 1`
     head -n $LINE $TARGFILE | tail -1 | read COMMENTS[i] 
i=`expr ${i} + 1`
done

curyy=`date -u +%Y`
curmm=`date -u +%m`
curdd=`date -u +%d`
curhh=`date -u +%H`
PDY=${curyy}${curmm}${curdd}
latestobstime=`/nwprod/util/exec/ndate +120 ${PDY}00`

i=1
CURCASES=0
while [ $i -le $CASES ]
do
   #  LOOP TO ADD TIME STEPS BETWEEN OBSDATE AND VERIDATE
   OBSDATE_TMP=${OBSDATE[i]}
   while [[ $OBSDATE_TMP -le ${VERIDATE[i]} && $OBSDATE_TMP -lt $latestobstime ]] 
   do
      OBSDATE_TMP=`/nwprod/util/exec/ndate +12 $OBSDATE_TMP`
      CURCASES=`expr $CURCASES + 1` 
   done
i=`expr ${i} + 1`
done

echo $CURCASES >> $GESdir/targdata_tmp.d 
echo $RESOLUTION >> $GESdir/targdata_tmp.d 
echo $IVNORM >> $GESdir/targdata_tmp.d
echo $RADVR >> $GESdir/targdata_tmp.d
echo $LON1 >> $GESdir/targdata_tmp.d
echo $LON2 >> $GESdir/targdata_tmp.d
echo $LAT1 >> $GESdir/targdata_tmp.d
echo $LAT2 >> $GESdir/targdata_tmp.d

i=1
while [ $i -le $CASES ]
do
  OBSDATE_TMP=${OBSDATE[i]}
  while [[ $OBSDATE_TMP -le ${VERIDATE[i]} && $OBSDATE_TMP -lt $latestobstime ]]
  do
      echo ${OBSDATE_TMP} >> $GESdir/targdata_tmp.d
      echo ${VERIDATE[i]} >> $GESdir/targdata_tmp.d
      echo ${VRLON[i]} >> $GESdir/targdata_tmp.d
      echo ${VRLAT[i]} >> $GESdir/targdata_tmp.d
      echo ${PRIORITY[i]} >> $GESdir/targdata_tmp.d
      echo ${COMMENTS[i]} >> $GESdir/targdata_tmp.d
      OBSDATE_TMP=`/nwprod/util/exec/ndate +12 $OBSDATE_TMP`
  done
  i=`expr ${i} + 1`
done


chmod 777 ${GESdir}/targdata_tmp.d
mv ${GESdir}/targdata_tmp.d ${GESdir}/targdata.d


ftp rzdm << ftpEOF > /dev/null 2>&1
cd /home/people/nco/www/htdocs/pmb/sdm_wsr
mkdir $PDY
cd $PDY
lcd $GESdir
put targdata.txt.$curhh targdata.txt
put targdata.d targdata.d
bye
ftpEOF


exit


